import is from "../../mod.ts";
import { assertEquals } from "https://deno.land/std@0.224.0/assert/assert_equals.ts";

Deno.test("digit", () => {
  assertEquals(is.digit("0"), true);
  assertEquals(is.digit("1"), true);
  assertEquals(is.digit("9"), true);
  assertEquals(is.digit(0), true);
  assertEquals(is.digit(1), true);
  assertEquals(is.digit(9), true);
  assertEquals(is.digit(-1), false);
  assertEquals(is.digit("00"), false);
  assertEquals(is.digit("1337"), false);
  assertEquals(is.digit(""), false);
  assertEquals(is.digit(" "), false);
  assertEquals(is.digit("a"), false);
  assertEquals(is.digit("A"), false);
  assertEquals(is.digit("!"), false);
  assertEquals(is.digit("@"), false);
  assertEquals(is.digit("#"), false);
  assertEquals(is.digit("$"), false);
  assertEquals(is.digit("%"), false);
  assertEquals(is.digit("^"), false);
  assertEquals(is.digit("&"), false);
  assertEquals(is.digit("*"), false);
  assertEquals(is.digit("("), false);
  assertEquals(is.digit(")"), false);
  assertEquals(is.digit("-"), false);
  assertEquals(is.digit("_"), false);
  assertEquals(is.digit("+"), false);
  assertEquals(is.digit("="), false);
  assertEquals(is.digit("{"), false);
  assertEquals(is.digit("["), false);
  assertEquals(is.digit("}"), false);
  assertEquals(is.digit("]"), false);
  assertEquals(is.digit("|"), false);
  assertEquals(is.digit("\\"), false);
  assertEquals(is.digit(":"), false);
  assertEquals(is.digit(";"), false);
  assertEquals(is.digit('"'), false);
  assertEquals(is.digit("'"), false);
  assertEquals(is.digit("<"), false);
  assertEquals(is.digit(","), false);
  assertEquals(is.digit(">"), false);
  assertEquals(is.digit("."), false);
  assertEquals(is.digit("?"), false);
  assertEquals(is.digit("/"), false);
  assertEquals(is.digit("`"), false);
  assertEquals(is.digit("~"), false);

  assertEquals(is.digit(null), false);
  assertEquals(is.digit(undefined), false);
  assertEquals(is.digit(true), false);
  assertEquals(is.digit(false), false);

  assertEquals(is.digit([]), false);
  assertEquals(is.digit({}), false);
  assertEquals(is.digit(() => {}), false);
  assertEquals(is.digit(new Date()), false);
  assertEquals(is.digit(/./), false);
  assertEquals(is.digit(Symbol()), false);
  assertEquals(is.digit(BigInt(1)), false);
});
